
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite -- YosysHQ Edition [202409031137]     |
 |  Copyright (C) 2012 - 2024 YosysHQ GmbH                                    |
 |  For support, please contact support@yosyshq.com                           |
 \----------------------------------------------------------------------------/
 Yosys 0.45 (git sha1 9ed031ddd, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: counter.v
Parsing formal SystemVerilog input from `counter.v' to AST representation.
Generating RTLIL representation for module `\counter'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \counter

2.1.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.
Module counter directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$counter.v:47$31 in module counter.
Marked 1 switch rules as full_case in process $proc$counter.v:41$27 in module counter.
Marked 7 switch rules as full_case in process $proc$counter.v:11$17 in module counter.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 20 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\counter.$proc$counter.v:40$86'.
  Set init value: \init = 1'1

2.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\counter.$proc$counter.v:11$17'.

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~18 debug messages>

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter.$proc$counter.v:40$86'.
Creating decoders for process `\counter.$proc$counter.v:47$31'.
     1/10: $assert$counter.v:86$83_EN
     2/10: $assert$counter.v:84$80_EN
     3/10: $assert$counter.v:82$74_EN
     4/10: $assert$counter.v:75$68_EN
     5/10: $assert$counter.v:73$65_EN
     6/10: $assert$counter.v:71$59_EN
     7/10: $assert$counter.v:61$55_EN
     8/10: $assert$counter.v:60$53_EN
     9/10: $assert$counter.v:59$51_EN
    10/10: $assert$counter.v:50$48_EN
Creating decoders for process `\counter.$proc$counter.v:41$27'.
     1/2: $assume$counter.v:43$29_EN
     2/2: $assume$counter.v:42$28_EN
Creating decoders for process `\counter.$proc$counter.v:11$17'.
     1/9: $7\tmp[9:0]
     2/9: $6\tmp[9:0]
     3/9: $5\tmp[9:0]
     4/9: $4\tmp[9:0]
     5/9: $3\tmp[9:0]
     6/9: $2\tmp[9:0]
     7/9: $1\cnttmp[9:0]
     8/9: $1\tmp[9:0]
     9/9: $0\cnt[9:0]

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter.$past$counter.v:68$1$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$214' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:69$2$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$215' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:70$3$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$216' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:71$4$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$217' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:72$5$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$218' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:72$6$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$219' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:73$7$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$220' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:75$8$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$221' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:79$9$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$222' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:80$10$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$223' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:81$11$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$224' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:82$12$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$225' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:83$13$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$226' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:83$14$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$227' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:84$15$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$228' with positive edge clock.
Creating register for signal `\counter.$past$counter.v:86$16$0' using process `\counter.$proc$counter.v:47$31'.
  created $dff cell `$procdff$229' with positive edge clock.
Creating register for signal `\counter.\init' using process `\counter.$proc$counter.v:41$27'.
  created $dff cell `$procdff$230' with positive edge clock.
Creating register for signal `\counter.\cnt' using process `\counter.$proc$counter.v:11$17'.
  created $adff cell `$procdff$233' with positive edge clock and positive level reset.
Creating register for signal `\counter.\tmp' using process `\counter.$proc$counter.v:11$17'.
  created $dff cell `$procdff$238' with positive edge clock.
Creating register for signal `\counter.\cnttmp' using process `\counter.$proc$counter.v:11$17'.
  created $dff cell `$procdff$243' with positive edge clock.

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `counter.$proc$counter.v:40$86'.
Found and cleaned up 10 empty switches in `\counter.$proc$counter.v:47$31'.
Removing empty process `counter.$proc$counter.v:47$31'.
Found and cleaned up 1 empty switch in `\counter.$proc$counter.v:41$27'.
Removing empty process `counter.$proc$counter.v:41$27'.
Found and cleaned up 7 empty switches in `\counter.$proc$counter.v:11$17'.
Removing empty process `counter.$proc$counter.v:11$17'.
Cleaned up 18 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~26 debug messages>

2.3. Executing FUTURE pass.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 9 unused cells and 103 unused wires.
<suppressed ~12 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$172.
    dead port 1/2 on $mux $procmux$174.
    dead port 1/2 on $mux $procmux$177.
    dead port 1/2 on $mux $procmux$183.
    dead port 1/2 on $mux $procmux$186.
    dead port 1/2 on $mux $procmux$189.
    dead port 1/2 on $mux $procmux$192.
    dead port 1/2 on $mux $procmux$199.
    dead port 2/2 on $mux $procmux$201.
    dead port 2/2 on $mux $procmux$207.
Removed 10 multiplexer ports.
<suppressed ~14 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 10) from port B of cell counter.$eq$counter.v:17$18 ($eq).
Removed top 1 bits (of 10) from port B of cell counter.$le$counter.v:19$19 ($le).
Removed top 30 bits (of 32) from port B of cell counter.$eq$counter.v:23$21 ($eq).
Removed top 1 bits (of 10) from port B of cell counter.$ge$counter.v:25$22 ($ge).
Removed top 1 bits (of 10) from port B of cell counter.$ge$counter.v:32$24 ($ge).
Removed top 1 bits (of 10) from port B of cell counter.$le$counter.v:32$25 ($le).
Removed top 3 bits (of 10) from port B of cell counter.$eq$counter.v:50$49 ($eq).
Removed top 1 bits (of 10) from port B of cell counter.$le$counter.v:59$52 ($le).
Removed top 1 bits (of 10) from port B of cell counter.$ge$counter.v:60$54 ($ge).
Removed top 5 bits (of 10) from port B of cell counter.$ne$counter.v:61$56 ($ne).
Removed top 5 bits (of 10) from port B of cell counter.$eq$counter.v:70$58 ($eq).
Removed top 5 bits (of 10) from port B of cell counter.$eq$counter.v:71$61 ($eq).
Removed top 1 bits (of 10) from port B of cell counter.$le$counter.v:72$62 ($le).
Removed top 1 bits (of 10) from port B of cell counter.$gt$counter.v:72$63 ($gt).
Removed top 6 bits (of 10) from port B of cell counter.$eq$counter.v:75$70 ($eq).
Removed top 8 bits (of 10) from port B of cell counter.$eq$counter.v:81$73 ($eq).
Removed top 4 bits (of 10) from port B of cell counter.$eq$counter.v:82$76 ($eq).
Removed top 1 bits (of 10) from port B of cell counter.$ge$counter.v:83$77 ($ge).
Removed top 1 bits (of 10) from port B of cell counter.$lt$counter.v:83$78 ($lt).
Removed top 5 bits (of 10) from port B of cell counter.$eq$counter.v:86$85 ($eq).
Removed top 7 bits (of 10) from mux cell counter.$procmux$196 ($mux).
Removed top 6 bits (of 10) from mux cell counter.$procmux$205 ($mux).
Removed top 6 bits (of 10) from wire counter.$3\tmp[9:0].
Removed top 7 bits (of 10) from wire counter.$4\tmp[9:0].

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== counter ===

   Number of wires:                 92
   Number of wire bits:            313
   Number of public wires:           5
   Number of public wire bits:      14
   Number of ports:                  4
   Number of port bits:             13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $add                            1
     $adff                           1
     $check                         12
     $dff                           17
     $eq                             9
     $ge                             4
     $gt                             1
     $le                             4
     $logic_and                      3
     $logic_not                      3
     $lt                             1
     $mux                           38
     $ne                             1
     $sub                            6

2.13. Executing CHECK pass (checking for obvious problems).
Checking module counter...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \counter

3.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.
Module counter directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing jny backend.

5. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: b431120f18, CPU: user 0.02s system 0.01s, MEM: 28.88 MB peak
Yosys 0.45 (git sha1 9ed031ddd, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 22% 5x opt_clean (0 sec), 19% 6x opt_expr (0 sec), ...
