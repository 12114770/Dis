
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite -- YosysHQ Edition [202409031137]     |
 |  Copyright (C) 2012 - 2024 YosysHQ GmbH                                    |
 |  For support, please contact support@yosyshq.com                           |
 \----------------------------------------------------------------------------/
 Yosys 0.45 (git sha1 9ed031ddd, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)

-- Executing script file `design_prep.ys' --

1. Executing RTLIL frontend.
Input filename: design.il

2. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module tb_counter.
Found 0 SCCs in module counter_0.
Found 0 SCCs in module assertions.
Found 0 SCCs in module \$_XOR_.
Found 0 SCCs in module \$_SDFFE_PP1P__6.
Found 0 SCCs in module \$_SDFFE_PP1P__5.
Found 0 SCCs in module \$_SDFFE_PP1P__4.
Found 0 SCCs in module \$_SDFFE_PP1P__3.
Found 0 SCCs in module \$_SDFFE_PP1P__2.
Found 0 SCCs in module \$_SDFFE_PP1P__1.
Found 0 SCCs in module \$_SDFFE_PP1P__0.
Found 0 SCCs in module \$_SDFFE_PP0P__2.
Found 0 SCCs in module \$_SDFFE_PP0P__1.
Found 0 SCCs in module \$_SDFFE_PP0P__0.
Found 0 SCCs in module \$_OR_.
Found 0 SCCs in module \$_NOT_.
Found 0 SCCs in module \$_MUX_.
Found 0 SCCs in module \$_AND_.
Found 0 SCCs.

3. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4. Executing MEMORY_NORDFF pass (extracting $dff cells from memories).

5. Executing ASYNC2SYNC pass.

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tb_counter..
Finding unused cells or wires in module \counter_0..
Finding unused cells or wires in module \assertions..
Finding unused cells or wires in module \$_XOR_..
Finding unused cells or wires in module \$_SDFFE_PP1P__6..
Finding unused cells or wires in module \$_SDFFE_PP1P__5..
Finding unused cells or wires in module \$_SDFFE_PP1P__4..
Finding unused cells or wires in module \$_SDFFE_PP1P__3..
Finding unused cells or wires in module \$_SDFFE_PP1P__2..
Finding unused cells or wires in module \$_SDFFE_PP1P__1..
Finding unused cells or wires in module \$_SDFFE_PP1P__0..
Finding unused cells or wires in module \$_SDFFE_PP0P__2..
Finding unused cells or wires in module \$_SDFFE_PP0P__1..
Finding unused cells or wires in module \$_SDFFE_PP0P__0..
Finding unused cells or wires in module \$_OR_..
Finding unused cells or wires in module \$_NOT_..
Finding unused cells or wires in module \$_MUX_..
Finding unused cells or wires in module \$_AND_..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

7. Executing FORMALFF pass.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_AND_..
Finding unused cells or wires in module \$_MUX_..
Finding unused cells or wires in module \$_NOT_..
Finding unused cells or wires in module \$_OR_..
Finding unused cells or wires in module \$_SDFFE_PP0P__0..
Finding unused cells or wires in module \$_SDFFE_PP0P__1..
Finding unused cells or wires in module \$_SDFFE_PP0P__2..
Finding unused cells or wires in module \$_SDFFE_PP1P__0..
Finding unused cells or wires in module \$_SDFFE_PP1P__1..
Finding unused cells or wires in module \$_SDFFE_PP1P__2..
Finding unused cells or wires in module \$_SDFFE_PP1P__3..
Finding unused cells or wires in module \$_SDFFE_PP1P__4..
Finding unused cells or wires in module \$_SDFFE_PP1P__5..
Finding unused cells or wires in module \$_SDFFE_PP1P__6..
Finding unused cells or wires in module \$_XOR_..
Finding unused cells or wires in module \assertions..
Finding unused cells or wires in module \counter_0..
Finding unused cells or wires in module \tb_counter..
Removed 13 unused cells and 13 unused wires.
<suppressed ~26 debug messages>

9. Executing CHECK pass (checking for obvious problems).
Checking module \$_AND_...
Checking module \$_MUX_...
Checking module \$_NOT_...
Checking module \$_OR_...
Checking module \$_SDFFE_PP0P__0...
Checking module \$_SDFFE_PP0P__1...
Checking module \$_SDFFE_PP0P__2...
Checking module \$_SDFFE_PP1P__0...
Checking module \$_SDFFE_PP1P__1...
Checking module \$_SDFFE_PP1P__2...
Checking module \$_SDFFE_PP1P__3...
Checking module \$_SDFFE_PP1P__4...
Checking module \$_SDFFE_PP1P__5...
Checking module \$_SDFFE_PP1P__6...
Checking module \$_XOR_...
Checking module assertions...
Checking module counter_0...
Checking module tb_counter...
Found and reported 0 problems.

10. Executing SETUNDEF pass (replace undef values with defined constants).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_AND_.
Optimizing module \$_MUX_.
Optimizing module \$_NOT_.
Optimizing module \$_OR_.
Optimizing module \$_SDFFE_PP0P__0.
Optimizing module \$_SDFFE_PP0P__1.
Optimizing module \$_SDFFE_PP0P__2.
Optimizing module \$_SDFFE_PP1P__0.
Optimizing module \$_SDFFE_PP1P__1.
Optimizing module \$_SDFFE_PP1P__2.
Optimizing module \$_SDFFE_PP1P__3.
Optimizing module \$_SDFFE_PP1P__4.
Optimizing module \$_SDFFE_PP1P__5.
Optimizing module \$_SDFFE_PP1P__6.
Optimizing module \$_XOR_.
Optimizing module assertions.
Optimizing module counter_0.
Optimizing module tb_counter.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_AND_'.
Finding identical cells in module `\$_MUX_'.
Finding identical cells in module `\$_NOT_'.
Finding identical cells in module `\$_OR_'.
Finding identical cells in module `\$_SDFFE_PP0P__0'.
Finding identical cells in module `\$_SDFFE_PP0P__1'.
Finding identical cells in module `\$_SDFFE_PP0P__2'.
Finding identical cells in module `\$_SDFFE_PP1P__0'.
Finding identical cells in module `\$_SDFFE_PP1P__1'.
Finding identical cells in module `\$_SDFFE_PP1P__2'.
Finding identical cells in module `\$_SDFFE_PP1P__3'.
Finding identical cells in module `\$_SDFFE_PP1P__4'.
Finding identical cells in module `\$_SDFFE_PP1P__5'.
Finding identical cells in module `\$_SDFFE_PP1P__6'.
Finding identical cells in module `\$_XOR_'.
Finding identical cells in module `\assertions'.
Finding identical cells in module `\counter_0'.
Finding identical cells in module `\tb_counter'.
Removed a total of 0 cells.

11.3. Executing OPT_DFF pass (perform DFF optimizations).

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_AND_..
Finding unused cells or wires in module \$_MUX_..
Finding unused cells or wires in module \$_NOT_..
Finding unused cells or wires in module \$_OR_..
Finding unused cells or wires in module \$_SDFFE_PP0P__0..
Finding unused cells or wires in module \$_SDFFE_PP0P__1..
Finding unused cells or wires in module \$_SDFFE_PP0P__2..
Finding unused cells or wires in module \$_SDFFE_PP1P__0..
Finding unused cells or wires in module \$_SDFFE_PP1P__1..
Finding unused cells or wires in module \$_SDFFE_PP1P__2..
Finding unused cells or wires in module \$_SDFFE_PP1P__3..
Finding unused cells or wires in module \$_SDFFE_PP1P__4..
Finding unused cells or wires in module \$_SDFFE_PP1P__5..
Finding unused cells or wires in module \$_SDFFE_PP1P__6..
Finding unused cells or wires in module \$_XOR_..
Finding unused cells or wires in module \assertions..
Finding unused cells or wires in module \counter_0..
Finding unused cells or wires in module \tb_counter..
Removed 20 unused cells and 20 unused wires.
<suppressed ~22 debug messages>

11.5. Finished fast OPT passes.

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_AND_..
Finding unused cells or wires in module \$_MUX_..
Finding unused cells or wires in module \$_NOT_..
Finding unused cells or wires in module \$_OR_..
Finding unused cells or wires in module \$_SDFFE_PP0P__0..
Finding unused cells or wires in module \$_SDFFE_PP0P__1..
Finding unused cells or wires in module \$_SDFFE_PP0P__2..
Finding unused cells or wires in module \$_SDFFE_PP1P__0..
Finding unused cells or wires in module \$_SDFFE_PP1P__1..
Finding unused cells or wires in module \$_SDFFE_PP1P__2..
Finding unused cells or wires in module \$_SDFFE_PP1P__3..
Finding unused cells or wires in module \$_SDFFE_PP1P__4..
Finding unused cells or wires in module \$_SDFFE_PP1P__5..
Finding unused cells or wires in module \$_SDFFE_PP1P__6..
Finding unused cells or wires in module \$_XOR_..
Finding unused cells or wires in module \assertions..
Finding unused cells or wires in module \counter_0..
Finding unused cells or wires in module \tb_counter..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

13. Executing RTLIL backend.
Output filename: ../model/design_prep.il

End of script. Logfile hash: 3615c952ea, CPU: user 0.05s system 0.01s, MEM: 28.62 MB peak
Yosys 0.45 (git sha1 9ed031ddd, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 22% 4x opt_clean (0 sec), 14% 1x formalff (0 sec), ...
