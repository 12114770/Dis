
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite -- YosysHQ Edition [202409031137]     |
 |  Copyright (C) 2012 - 2024 YosysHQ GmbH                                    |
 |  For support, please contact support@yosyshq.com                           |
 \----------------------------------------------------------------------------/
 Yosys 0.45 (git sha1 9ed031ddd, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)

-- Executing script file `design_aiger.ys' --

1. Executing RTLIL frontend.
Input filename: design_prep.il

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \tb_counter
Used module:     \counter_0
Used module:         \assertions
Used module:         \$_SDFFE_PP1P__0
Used module:         \$_SDFFE_PP1P__6
Used module:         \$_SDFFE_PP1P__5
Used module:         \$_SDFFE_PP1P__4
Used module:         \$_SDFFE_PP0P__0
Used module:         \$_SDFFE_PP0P__2
Used module:         \$_SDFFE_PP1P__3
Used module:         \$_SDFFE_PP1P__2
Used module:         \$_SDFFE_PP1P__1
Used module:         \$_SDFFE_PP0P__1
Used module:         \$_AND_
Used module:         \$_OR_
Used module:         \$_XOR_
Used module:         \$_NOT_
Used module:         \$_MUX_

2.2. Analyzing design hierarchy..
Top module:  \tb_counter
Used module:     \counter_0
Used module:         \assertions
Used module:         \$_SDFFE_PP1P__0
Used module:         \$_SDFFE_PP1P__6
Used module:         \$_SDFFE_PP1P__5
Used module:         \$_SDFFE_PP1P__4
Used module:         \$_SDFFE_PP0P__0
Used module:         \$_SDFFE_PP0P__2
Used module:         \$_SDFFE_PP1P__3
Used module:         \$_SDFFE_PP1P__2
Used module:         \$_SDFFE_PP1P__1
Used module:         \$_SDFFE_PP0P__1
Used module:         \$_AND_
Used module:         \$_OR_
Used module:         \$_XOR_
Used module:         \$_NOT_
Used module:         \$_MUX_
Removed 0 unused modules.
Module tb_counter directly or indirectly contains formal properties -> setting "keep" attribute.
Module counter_0 directly or indirectly contains formal properties -> setting "keep" attribute.
Module assertions directly or indirectly contains formal properties -> setting "keep" attribute.

3. Executing FORMALFF pass.

4. Executing FLATTEN pass (flatten design).
Deleting now unused module counter_0.
Deleting now unused module assertions.
Deleting now unused module \$_XOR_.
Deleting now unused module \$_SDFFE_PP1P__6.
Deleting now unused module \$_SDFFE_PP1P__5.
Deleting now unused module \$_SDFFE_PP1P__4.
Deleting now unused module \$_SDFFE_PP1P__3.
Deleting now unused module \$_SDFFE_PP1P__2.
Deleting now unused module \$_SDFFE_PP1P__1.
Deleting now unused module \$_SDFFE_PP1P__0.
Deleting now unused module \$_SDFFE_PP0P__2.
Deleting now unused module \$_SDFFE_PP0P__1.
Deleting now unused module \$_SDFFE_PP0P__0.
Deleting now unused module \$_OR_.
Deleting now unused module \$_NOT_.
Deleting now unused module \$_MUX_.
Deleting now unused module \$_AND_.
<suppressed ~343 debug messages>

5. Executing SETUNDEF pass (replace undef values with defined constants).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tb_counter.
<suppressed ~14 debug messages>

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tb_counter'.
<suppressed ~60 debug messages>
Removed a total of 24 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tb_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tb_counter.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tb_counter'.
Removed a total of 0 cells.

6.6. Executing OPT_SHARE pass.

6.7. Executing OPT_DFF pass (perform DFF optimizations).

6.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tb_counter..
Removed 18 unused cells and 30 unused wires.
<suppressed ~19 debug messages>

6.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module tb_counter.
<suppressed ~18 debug messages>

6.10. Rerunning OPT passes. (Maybe there is more to do..)

6.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tb_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

6.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tb_counter.
Performed a total of 0 changes.

6.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tb_counter'.
Removed a total of 0 cells.

6.14. Executing OPT_SHARE pass.

6.15. Executing OPT_DFF pass (perform DFF optimizations).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tb_counter..

6.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module tb_counter.

6.18. Finished OPT passes. (There is nothing left to do.)

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/lukas/tabby-linux-x64-20240903/tabby/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/lukas/tabby-linux-x64-20240903/tabby/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $ff.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=31:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=31:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=31:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=31:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=31:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=32:B_SIGNED=0:B_WIDTH=31:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $ne.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=11:B_SIGNED=0:B_WIDTH=11:Y_WIDTH=11:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$ec32b97001540459632a2df9accd677d3703ea0f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
No more expansions possible.
<suppressed ~2178 debug messages>

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tb_counter.
<suppressed ~1721 debug messages>

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tb_counter'.
<suppressed ~2121 debug messages>
Removed a total of 707 cells.

8.3. Executing OPT_DFF pass (perform DFF optimizations).

8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tb_counter..
Removed 464 unused cells and 1354 unused wires.
<suppressed ~465 debug messages>

8.5. Finished fast OPT passes.

9. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

10. Executing FORMALFF pass.

11. Executing SIMPLEMAP pass (map simple cells to gate primitives).

12. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\tb_counter' to `<abc-temp-dir>/input.blif'..
Extracted 759 gates and 787 wires to a netlist network with 26 inputs and 36 outputs.

13.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      744
ABC RESULTS:               NOT cells:      547
ABC RESULTS:        internal signals:      725
ABC RESULTS:           input signals:       26
ABC RESULTS:          output signals:       36
Removing temp directory.

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tb_counter..
Removed 0 unused cells and 1076 unused wires.
<suppressed ~758 debug messages>

15. Printing statistics.

=== tb_counter ===

   Number of wires:               1763
   Number of wire bits:           2033
   Number of public wires:         452
   Number of public wire bits:     722
   Number of ports:                  3
   Number of port bits:              3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1681
     $_AND_                        744
     $_FF_                          31
     $_NOT_                        547
     $anyinit                        3
     $assert                        10
     $assume                         3
     $scopeinfo                    343

16. Executing AIGER backend.

End of script. Logfile hash: 7131e55f94, CPU: user 0.19s system 0.03s, MEM: 47.35 MB peak
Yosys 0.45 (git sha1 9ed031ddd, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 27% 1x abc (0 sec), 20% 1x techmap (0 sec), ...
