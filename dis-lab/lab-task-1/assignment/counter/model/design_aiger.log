
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite -- YosysHQ Edition [202409031137]     |
 |  Copyright (C) 2012 - 2024 YosysHQ GmbH                                    |
 |  For support, please contact support@yosyshq.com                           |
 \----------------------------------------------------------------------------/
 Yosys 0.45 (git sha1 9ed031ddd, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)

-- Executing script file `design_aiger.ys' --

1. Executing RTLIL frontend.
Input filename: design_prep.il

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \counter

2.2. Analyzing design hierarchy..
Top module:  \counter
Removed 0 unused modules.

3. Executing FORMALFF pass.

4. Executing FLATTEN pass (flatten design).

5. Executing SETUNDEF pass (replace undef values with defined constants).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
    Consolidated identical input bits for $mux cell $procmux$57:
      Old ports: A=3'000, B=3'101, Y=$3\summand[9:0]
      New ports: A=1'0, B=1'1, Y=$3\summand[9:0] [0]
      New connections: $3\summand[9:0] [2:1] = { $3\summand[9:0] [0] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$47:
      Old ports: A=4'0000, B=4'1010, Y=$4\summand[9:0]
      New ports: A=1'0, B=1'1, Y=$4\summand[9:0] [1]
      New connections: { $4\summand[9:0] [3:2] $4\summand[9:0] [0] } = { $4\summand[9:0] [1] 2'00 }
    Consolidated identical input bits for $mux cell $procmux$32:
      Old ports: A=10'0000000000, B=10'1111110111, Y=$6\summand[9:0]
      New ports: A=1'0, B=1'1, Y=$6\summand[9:0] [0]
      New connections: $6\summand[9:0] [9:1] = { $6\summand[9:0] [0] $6\summand[9:0] [0] $6\summand[9:0] [0] $6\summand[9:0] [0] $6\summand[9:0] [0] $6\summand[9:0] [0] 1'0 $6\summand[9:0] [0] $6\summand[9:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$22:
      Old ports: A=10'0000000000, B=10'1111101110, Y=$7\summand[9:0]
      New ports: A=1'0, B=1'1, Y=$7\summand[9:0] [1]
      New connections: { $7\summand[9:0] [9:2] $7\summand[9:0] [0] } = { $7\summand[9:0] [1] $7\summand[9:0] [1] $7\summand[9:0] [1] $7\summand[9:0] [1] $7\summand[9:0] [1] 1'0 $7\summand[9:0] [1] $7\summand[9:0] [1] 1'0 }
  Optimizing cells in module \counter.
    Consolidated identical input bits for $mux cell $procmux$65:
      Old ports: A=$4\summand[9:0], B={ 1'0 $3\summand[9:0] }, Y=$2\summand[9:0]
      New ports: A={ $4\summand[9:0] [1] 1'0 }, B={ 1'0 $3\summand[9:0] [0] }, Y=$2\summand[9:0] [1:0]
      New connections: $2\summand[9:0] [3:2] = $2\summand[9:0] [1:0]
    Consolidated identical input bits for $mux cell $procmux$40:
      Old ports: A=$7\summand[9:0], B=$6\summand[9:0], Y=$5\summand[9:0]
      New ports: A={ $7\summand[9:0] [1] $7\summand[9:0] [1] 1'0 }, B={ 1'0 $6\summand[9:0] [0] $6\summand[9:0] [0] }, Y={ $5\summand[9:0] [3] $5\summand[9:0] [1:0] }
      New connections: { $5\summand[9:0] [9:4] $5\summand[9:0] [2] } = { $5\summand[9:0] [1] $5\summand[9:0] [1] $5\summand[9:0] [1] $5\summand[9:0] [1] $5\summand[9:0] [1:0] $5\summand[9:0] [1] }
  Optimizing cells in module \counter.
    Consolidated identical input bits for $mux cell $procmux$70:
      Old ports: A=$5\summand[9:0], B={ 6'000000 $2\summand[9:0] }, Y=\summand
      New ports: A={ $5\summand[9:0] [1:0] $5\summand[9:0] [3] $5\summand[9:0] [1] $5\summand[9:0] [1:0] }, B={ 2'00 $2\summand[9:0] [1:0] $2\summand[9:0] [1:0] }, Y=\summand [5:0]
      New connections: \summand [9:6] = { \summand [5] \summand [5] \summand [5] \summand [5] }
  Optimizing cells in module \counter.
Performed a total of 7 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

6.6. Executing OPT_SHARE pass.

6.7. Executing OPT_DFF pass (perform DFF optimizations).

6.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 16 unused cells and 15 unused wires.
<suppressed ~18 debug messages>

6.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.
<suppressed ~3 debug messages>

6.10. Rerunning OPT passes. (Maybe there is more to do..)

6.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

6.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

6.14. Executing OPT_SHARE pass.

6.15. Executing OPT_DFF pass (perform DFF optimizations).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

6.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

6.18. Finished OPT passes. (There is nothing left to do.)

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /home/lukas/tabby-linux-x64-20240903/tabby/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/lukas/tabby-linux-x64-20240903/tabby/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~74 debug messages>

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

8.3. Executing OPT_DFF pass (perform DFF optimizations).

8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

8.5. Finished fast OPT passes.

9. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

10. Executing FORMALFF pass.

11. Executing SIMPLEMAP pass (map simple cells to gate primitives).

12. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

13.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        1
Removing temp directory.

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

15. Printing statistics.

=== counter ===

   Number of wires:                  6
   Number of wire bits:             15
   Number of public wires:           5
   Number of public wire bits:      14
   Number of ports:                  3
   Number of port bits:              3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_NOT_                          1
     $assume                         1

16. Executing AIGER backend.

End of script. Logfile hash: 1c1823477c, CPU: user 0.02s system 0.01s, MEM: 30.88 MB peak
Yosys 0.45 (git sha1 9ed031ddd, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 73% 1x abc (0 sec), 12% 1x read_verilog (0 sec), ...
